{"version":3,"file":"static/js/299.10f6adb6.chunk.js","mappings":"gMAEaA,E,QAAUC,EAAAA,IAAH,4G,SCCPC,EAAS,WACpB,OACE,SAACF,EAAD,WACE,SAAC,KAAD,CACEG,OAAO,KACPC,MAAM,KACNC,MAAM,YACNC,UAAU,kBACVC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,KAIhB,C,+JCWD,EAzBgB,WACd,MCA6B,WAC7B,OAA8BC,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAoBR,OAlBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,oGAEjBN,GAAW,GACXE,EAAS,MAHQ,UAKSK,EAAAA,EAAAA,IAAkBJ,GAL3B,OAKXK,EALW,OAOjBV,EAAWU,EAAYC,SAPN,gDASjBP,EAAS,KAAMQ,SATE,yBAWjBV,GAAW,GAXM,4EAAH,qDAclBM,GACD,GAAE,CAACH,IAEG,CAAEN,QAAAA,EAASE,QAAAA,EAASE,MAAAA,EAC5B,CD1BqCU,GAA5Bd,EAAR,EAAQA,QAASE,EAAjB,EAAiBA,QAASE,EAA1B,EAA0BA,MAE1B,OAAKJ,GAAYA,EAAQe,QAKvB,gCACGb,IAAW,SAACX,EAAA,EAAD,IACXa,IAAS,uBAAIA,KACd,wBACGJ,EAAQgB,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC1B,OACE,2BACE,wBAAKD,KACL,uBAAIC,MAFGF,EAKZ,UAfE,uBAAG,6CAmBb,C,mMEvBDG,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAHc,oCAMT,IAAMC,EAAiB,mCAAG,oGACRF,EAAAA,EAAAA,IAAU,sBADF,cACzBG,EADyB,yBAGxBA,EAASC,MAHe,2CAAH,qDAMjBC,EAAgB,mCAAG,WAAMC,GAAN,uFACPN,EAAAA,EAAAA,IAAA,eAA0B,CAC/CO,OAAQ,CACND,MAAAA,KAH0B,cACxBH,EADwB,yBAOvBA,EAASC,MAPc,2CAAH,sDAUhBI,EAAiB,mCAAG,WAAMtB,GAAN,uFACRc,EAAAA,EAAAA,IAAA,gBAAmBd,IADX,cACzBiB,EADyB,yBAGxBA,EAASC,MAHe,2CAAH,sDAMjBK,EAAc,mCAAG,WAAMvB,GAAN,uFACLc,EAAAA,EAAAA,IAAA,gBAAmBd,EAAnB,aADK,cACtBiB,EADsB,yBAGrBA,EAASC,MAHY,2CAAH,sDAMdd,EAAiB,mCAAG,WAAMJ,GAAN,uFACRc,EAAAA,EAAAA,IAAA,gBAAmBd,EAAnB,aADQ,cACzBiB,EADyB,yBAGxBA,EAASC,MAHe,2CAAH,qD","sources":["components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","components/Reviews.jsx","hooks/useFetchReviews.jsx","services/API.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n`;\n","import { Circles } from 'react-loader-spinner';\nimport { Wrapper } from './Loader.styled';\n\nexport const Loader = () => {\n  return (\n    <Wrapper>\n      <Circles\n        height=\"80\"\n        width=\"80\"\n        color=\"#a71ad1d4\"\n        ariaLabel=\"circles-loading\"\n        wrapperStyle={{}}\n        wrapperClass=\"\"\n        visible={true}\n      />\n    </Wrapper>\n  );\n};\n","import { useFetchReviews } from 'hooks/useFetchReviews';\nimport { Loader } from './Loader/Loader';\n\nconst Reviews = () => {\n  const { reviews, loading, error } = useFetchReviews();\n\n  if (!reviews || !reviews.length) {\n    return <p>We don`t have any reviews for this movie.</p>;\n  }\n\n  return (\n    <>\n      {loading && <Loader />}\n      {error && <p>{error}</p>}\n      <ul>\n        {reviews.map(({ id, author, content }) => {\n          return (\n            <li key={id}>\n              <h3>{author}</h3>\n              <p>{content}</p>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nexport default Reviews;","import { useEffect, useState } from 'react';\nimport { fetchMovieReviews } from 'services/API';\nimport { useParams } from 'react-router-dom';\n\nexport const useFetchReviews = () => {\n  const [reviews, setReviews] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        const reviewsData = await fetchMovieReviews(movieId);\n\n        setReviews(reviewsData.results);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchReviews();\n  }, [movieId]);\n\n  return { reviews, loading, error };\n};\n","import axios from 'axios';\n\nconst API_KEY = 'b2d4091651a56eb06e12f309ba271df6';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.params = {\n  api_key: API_KEY,\n};\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get('trending/movie/day');\n\n  return response.data;\n};\n\nexport const fetchMovieByName = async query => {\n  const response = await axios.get(`search/movie`, {\n    params: {\n      query,\n    },\n  });\n\n  return response.data;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(`movie/${movieId}`);\n\n  return response.data;\n};\n\nexport const fetchMovieCast = async movieId => {\n  const response = await axios.get(`movie/${movieId}/credits`);\n\n  return response.data;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const response = await axios.get(`movie/${movieId}/reviews`);\n\n  return response.data;\n};\n"],"names":["Wrapper","styled","Loader","height","width","color","ariaLabel","wrapperStyle","wrapperClass","visible","useState","reviews","setReviews","loading","setLoading","error","setError","movieId","useParams","useEffect","fetchReviews","fetchMovieReviews","reviewsData","results","message","useFetchReviews","length","map","id","author","content","axios","api_key","getTrendingMovies","response","data","fetchMovieByName","query","params","fetchMovieDetails","fetchMovieCast"],"sourceRoot":""}