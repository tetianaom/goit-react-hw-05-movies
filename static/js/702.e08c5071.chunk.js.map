{"version":3,"file":"static/js/702.e08c5071.chunk.js","mappings":"gRA+BA,EA5Ba,WACX,MCA0B,WAC1B,OAAwBA,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAoBR,OAlBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,oGAEdN,GAAW,GACXE,EAAS,MAHK,UAKSK,EAAAA,EAAAA,IAAeJ,GALxB,OAKRK,EALQ,OAOdV,EAAQU,EAASX,MAPH,gDASdK,EAAS,KAAMO,SATD,yBAWdT,GAAW,GAXG,4EAAH,qDAcfM,GACD,GAAE,CAACH,IAEG,CAAEN,KAAAA,EAAME,QAAAA,EAASE,MAAAA,EACzB,CD1BkCS,GAAzBb,EAAR,EAAQA,KAAME,EAAd,EAAcA,QAASE,EAAvB,EAAuBA,MACvB,GAAKJ,EAIL,OACE,gCACGE,IAAW,SAACY,EAAA,EAAD,IACXV,IAAS,uBAAIA,KACd,wBACGJ,EAAKe,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,UAC7BC,EAASF,EAAY,yCACWA,GAClC,sCACJ,OACE,2BACE,gBAAKG,IAAKD,EAAQE,IAAKL,KACvB,wBAAKA,KACL,uBAAIE,MAHGH,EAMZ,QAIR,C,gFE3BYO,E,QAAUC,EAAAA,IAAH,4G,SCCPV,EAAS,WACpB,OACE,SAACS,EAAD,WACE,SAAC,KAAD,CACEE,OAAO,KACPC,MAAM,KACNC,MAAM,YACNC,UAAU,kBACVC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,KAIhB,C,mMCdDC,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAHc,oCAMT,IAAMC,EAAiB,mCAAG,oGACRF,EAAAA,EAAAA,IAAU,sBADF,cACzBG,EADyB,yBAGxBA,EAASC,MAHe,2CAAH,qDAMjBC,EAAgB,mCAAG,WAAMC,GAAN,uFACPN,EAAAA,EAAAA,IAAA,eAA0B,CAC/CO,OAAQ,CACND,MAAAA,KAH0B,cACxBH,EADwB,yBAOvBA,EAASC,MAPc,2CAAH,sDAUhBI,EAAiB,mCAAG,WAAMlC,GAAN,uFACR0B,EAAAA,EAAAA,IAAA,gBAAmB1B,IADX,cACzB6B,EADyB,yBAGxBA,EAASC,MAHe,2CAAH,sDAMjB1B,EAAc,mCAAG,WAAMJ,GAAN,uFACL0B,EAAAA,EAAAA,IAAA,gBAAmB1B,EAAnB,aADK,cACtB6B,EADsB,yBAGrBA,EAASC,MAHY,2CAAH,sDAMdK,EAAiB,mCAAG,WAAMnC,GAAN,uFACR0B,EAAAA,EAAAA,IAAA,gBAAmB1B,EAAnB,aADQ,cACzB6B,EADyB,yBAGxBA,EAASC,MAHe,2CAAH,qD","sources":["components/Cast.jsx","hooks/useFetchCast.jsx","components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","services/API.js"],"sourcesContent":["import { useFetchCast } from 'hooks/useFetchCast';\nimport { Loader } from './Loader/Loader';\n\nconst Cast = () => {\n  const { cast, loading, error } = useFetchCast();\n  if (!cast) {\n    return;\n  }\n\n  return (\n    <>\n      {loading && <Loader />}\n      {error && <p>{error}</p>}\n      <ul>\n        {cast.map(({ id, name, profile_path, character }) => {\n          const imgUrl = profile_path\n            ? `https://image.tmdb.org/t/p/w154${profile_path}`\n            : 'https://via.placeholder.com/154x231';\n          return (\n            <li key={id}>\n              <img src={imgUrl} alt={name} />\n              <h3>{name}</h3>\n              <p>{character}</p>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nexport default Cast;\n","import { useEffect, useState } from 'react';\nimport { fetchMovieCast } from 'services/API';\nimport { useParams } from 'react-router-dom';\n\nexport const useFetchCast = () => {\n  const [cast, setCast] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        const castData = await fetchMovieCast(movieId);\n\n        setCast(castData.cast);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchCast();\n  }, [movieId]);\n\n  return { cast, loading, error };\n};\n","import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n`;\n","import { Circles } from 'react-loader-spinner';\nimport { Wrapper } from './Loader.styled';\n\nexport const Loader = () => {\n  return (\n    <Wrapper>\n      <Circles\n        height=\"80\"\n        width=\"80\"\n        color=\"#a71ad1d4\"\n        ariaLabel=\"circles-loading\"\n        wrapperStyle={{}}\n        wrapperClass=\"\"\n        visible={true}\n      />\n    </Wrapper>\n  );\n};\n","import axios from 'axios';\n\nconst API_KEY = 'b2d4091651a56eb06e12f309ba271df6';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.params = {\n  api_key: API_KEY,\n};\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get('trending/movie/day');\n\n  return response.data;\n};\n\nexport const fetchMovieByName = async query => {\n  const response = await axios.get(`search/movie`, {\n    params: {\n      query,\n    },\n  });\n\n  return response.data;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(`movie/${movieId}`);\n\n  return response.data;\n};\n\nexport const fetchMovieCast = async movieId => {\n  const response = await axios.get(`movie/${movieId}/credits`);\n\n  return response.data;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const response = await axios.get(`movie/${movieId}/reviews`);\n\n  return response.data;\n};\n"],"names":["useState","cast","setCast","loading","setLoading","error","setError","movieId","useParams","useEffect","fetchCast","fetchMovieCast","castData","message","useFetchCast","Loader","map","id","name","profile_path","character","imgUrl","src","alt","Wrapper","styled","height","width","color","ariaLabel","wrapperStyle","wrapperClass","visible","axios","api_key","getTrendingMovies","response","data","fetchMovieByName","query","params","fetchMovieDetails","fetchMovieReviews"],"sourceRoot":""}